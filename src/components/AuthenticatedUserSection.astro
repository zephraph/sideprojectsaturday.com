---
import { actions } from "astro:actions";
import type { Event } from "@generated/prisma/client";
import {
	canRsvpForCurrentEvent,
	formatEventDate,
	getEventStartTime,
	isWithinEventHours,
} from "@/lib/date-utils";

interface Props {
	user: {
		name?: string;
		email: string;
		subscribed?: boolean;
		rsvped?: boolean;
	};
	hasEvent?: boolean;
	hasActiveEvent?: boolean;
	eventForToday?: Event | null;
	rsvpEvent?: Event | null;
}

const {
	user,
	hasEvent = true,
	hasActiveEvent = false,
	eventForToday,
	rsvpEvent,
} = Astro.props;

// Check if buzzer should be shown
const showBuzzer = hasActiveEvent && isWithinEventHours();

// Get buzzer action result
const buzzerResult = Astro.getActionResult(actions.openDoor);
---

<div>
	<h3 class="text-xl font-bold text-gray-800 mb-3 text-center">
		Welcome back, {user.name || user.email}!
	</h3>
	<div class="space-y-3">
		<div
			id="rsvp-section"
			class={hasEvent
				? "bg-green-50 border border-green-200 rounded-md p-3"
				: "bg-gray-50 border border-gray-200 rounded-md p-3"}
		>
			{
				(() => {
					// Determine RSVP event context
					const canRsvpCurrent = canRsvpForCurrentEvent();
					const isCurrentEvent =
						rsvpEvent && eventForToday && rsvpEvent.id === eventForToday.id;
					const isRsvpingForCurrent = canRsvpCurrent && isCurrentEvent;

					let rsvpTitle = "Next Event RSVP";
					if (isRsvpingForCurrent && eventForToday) {
						if (eventForToday.status === "inprogress") {
							rsvpTitle = "Current Event RSVP";
						} else {
							rsvpTitle = "Today's Event RSVP";
						}
					}

					return (
						<div
							class={
								hasEvent
									? "text-sm font-medium text-green-800 mb-2"
									: "text-sm font-medium text-gray-800 mb-2"
							}
						>
							{rsvpTitle}
						</div>
					);
				})()
			}
			{
				hasEvent && rsvpEvent ? (
					<>
						{(() => {
							if (eventForToday) {
								const now = new Date();
								const eventStart = getEventStartTime(eventForToday.eventDate);
								const timeDiff = eventStart.getTime() - now.getTime();

								if (eventForToday.status === "inprogress") {
									return (
										<div class="text-green-700 text-sm font-semibold mb-2">
											üöÄ Event is happening now!
										</div>
									);
								} else if (timeDiff > 0 && eventForToday.id === rsvpEvent.id) {
									const hours = Math.floor(timeDiff / (1000 * 60 * 60));
									const minutes = Math.floor(
										(timeDiff % (1000 * 60 * 60)) / (1000 * 60),
									);
									return (
										<div class="text-blue-700 text-sm font-semibold mb-2">
											‚è∞ Starting in{" "}
											{hours > 0
												? `${hours}h ${minutes}m`
												: `${minutes} minutes`}
										</div>
									);
								}
							}

							// Show which event they're RSVPing for if it's not today's
							if (
								rsvpEvent &&
								(!eventForToday || rsvpEvent.id !== eventForToday.id)
							) {
								return (
									<div class="text-blue-700 text-sm font-semibold mb-2">
										üìÖ {formatEventDate(new Date(rsvpEvent.eventDate))}
									</div>
								);
							}

							return null;
						})()}
						<div class="flex items-center justify-between">
							<span class="text-green-700 text-sm">
								{user.rsvped ? "‚úÖ You're RSVP'd!" : "‚ùå Not RSVP'd"}
							</span>
							<form
								hx-post="/api/rsvp-toggle"
								hx-target="#rsvp-section"
								hx-swap="outerHTML"
							>
								<input
									type="hidden"
									name="rsvped"
									value={user.rsvped ? "false" : "true"}
								/>
								<button
									type="submit"
									class="text-xs text-green-600 hover:text-green-800 font-medium underline cursor-pointer"
								>
									{user.rsvped ? "Cancel RSVP" : "RSVP Now"}
								</button>
							</form>
						</div>
					</>
				) : (
					<div class="text-gray-600 text-sm">
						No event scheduled yet. Check back soon!
					</div>
				)
			}
		</div>

		<div class="bg-blue-50 border border-blue-200 rounded-md p-3">
			<div class="text-sm font-medium text-blue-800">Event Details</div>
			<div class="text-blue-700 text-sm mt-1">
				üìç Location: 325 Gold Street, Brooklyn, NY Studio 503<br />
				‚è∞ Time: 9:00 AM - 12:00 PM<br />
			</div>
		</div>

		<div class="bg-amber-50 border border-amber-200 rounded-md p-3">
			<div class="text-sm font-medium text-amber-800">What to Bring</div>
			<div class="text-amber-700 text-sm mt-1">
				üíª Your laptop<br />
				üí° A project idea<br />
				‚òï Good vibes!
			</div>
		</div>

		<div
			id="subscription-section"
			class="bg-purple-50 border border-purple-200 rounded-md p-3"
		>
			<div class="text-sm font-medium text-purple-800 mb-2">
				Event Notifications
			</div>
			<div class="flex items-center justify-between">
				<span class="text-purple-700 text-sm">
					{
						user.subscribed !== false
							? "üìß Subscribed to future events"
							: "üîï Unsubscribed from future events"
					}
				</span>
				<form
					hx-post="/api/subscription-toggle"
					hx-target="#subscription-section"
					hx-swap="outerHTML"
				>
					<input
						type="hidden"
						name="subscribed"
						value={user.subscribed === false ? "true" : "false"}
					/>
					<button
						type="submit"
						class="text-xs text-purple-600 hover:text-purple-800 font-medium underline cursor-pointer"
					>
						{user.subscribed !== false ? "Unsubscribe" : "Subscribe"}
					</button>
				</form>
			</div>
		</div>

		{
			showBuzzer && (
				<div class="bg-green-50 border border-green-200 rounded-md p-3" id="buzzer-section">
					<div class="text-sm font-medium text-green-800 mb-2">
						Building Access
					</div>
					{buzzerResult && !buzzerResult.error ? (
						<div class="text-green-700 text-sm mb-2">
							‚úÖ {buzzerResult.data.message}
						</div>
					) : buzzerResult?.error ? (
						<div class="text-red-700 text-sm mb-2">
							‚ùå {buzzerResult.error.message}
						</div>
					) : null}
					
					<!-- Loading State -->
					<div id="buzzer-loading" class="hidden">
						<div class="flex items-center justify-center mb-2">
							<div class="buzzer-loader"></div>
						</div>
						<div class="text-green-700 text-sm text-center mb-2">
							Opening door...
						</div>
					</div>
					
					<!-- Success State with Countdown -->
					<div id="buzzer-success" class="hidden">
						<div class="text-green-700 text-sm mb-2">
							‚úÖ Door opened! Come on up to the 5th floor.
						</div>
						<div id="buzzer-countdown" class="text-xs text-green-600 mb-2"></div>
					</div>
					
					<!-- Button Form -->
					<form method="POST" action={actions.openDoor} id="buzzer-form">
						<button
							type="submit"
							id="buzzer-button"
							class="w-full bg-green-600 text-white font-medium py-2 px-4 rounded-md hover:bg-green-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
						>
							üö™ Open Building Door
						</button>
					</form>
					<div class="text-xs text-green-600 mt-2" id="buzzer-help">
						Press to unlock the building entrance
					</div>
				</div>
			)
		}

		<form method="POST" action={actions.signOut}>
			<button
				type="submit"
				class="w-full text-gray-600 font-medium py-2 px-4 rounded-md border border-gray-300 hover:bg-gray-50 transition-all"
			>
				Sign Out
			</button>
		</form>
	</div>
</div>

<style>
	.buzzer-loader {
		width: 24px;
		height: 24px;
		border: 3px solid #f3f3f3;
		border-top: 3px solid #10b981;
		border-radius: 50%;
		animation: buzzer-spin 1s linear infinite;
	}

	@keyframes buzzer-spin {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
</style>

<script>
	// Only run if buzzer section exists
	const buzzerSection = document.getElementById("buzzer-section");
	if (buzzerSection) {
		const buzzerForm = document.getElementById("buzzer-form");
		const buzzerButton = document.getElementById("buzzer-button");
		const buzzerLoading = document.getElementById("buzzer-loading");
		const buzzerSuccess = document.getElementById("buzzer-success");
		const buzzerCountdown = document.getElementById("buzzer-countdown");
		const buzzerHelp = document.getElementById("buzzer-help");

		if (buzzerForm && buzzerButton) {
			buzzerForm.addEventListener("submit", async (e) => {
				// Show loading state immediately
				buzzerButton.disabled = true;
				buzzerLoading?.classList.remove("hidden");
				buzzerHelp?.classList.add("hidden");

				// Let the form submit normally and wait for page response
				// The server will handle the actual door opening
				
				// Note: We can't easily intercept the server action result here,
				// so we'll rely on the server-side buzzerResult to show success/error states
				// But we'll add a timeout to hide loading state if something goes wrong
				setTimeout(() => {
					if (buzzerLoading && !buzzerLoading.classList.contains("hidden")) {
						buzzerLoading.classList.add("hidden");
						buzzerButton.disabled = false;
						buzzerHelp?.classList.remove("hidden");
					}
				}, 5000); // 5 second timeout
			});
		}

		// If there's a successful buzzer result, show countdown
		const hasSuccess = buzzerSection.querySelector('[class*="‚úÖ"]')?.textContent?.includes("successfully");
		if (hasSuccess && buzzerSuccess && buzzerCountdown && buzzerButton) {
			startBuzzerCountdown();
		}

		function startBuzzerCountdown() {
			let seconds = 10;
			
			// Hide loading, show success
			buzzerLoading?.classList.add("hidden");
			buzzerSuccess?.classList.remove("hidden");
			buzzerHelp?.classList.add("hidden");
			
			// Disable button during countdown
			if (buzzerButton) {
				buzzerButton.disabled = true;
			}

			const updateCountdown = () => {
				if (seconds > 0 && buzzerCountdown) {
					buzzerCountdown.textContent = `Button available in ${seconds} seconds...`;
					seconds--;
					setTimeout(updateCountdown, 1000);
				} else {
					// Re-enable button and hide countdown
					if (buzzerCountdown) {
						buzzerCountdown.textContent = "";
					}
					if (buzzerButton) {
						buzzerButton.disabled = false;
					}
					if (buzzerSuccess) {
						buzzerSuccess.classList.add("hidden");
					}
					if (buzzerHelp) {
						buzzerHelp.classList.remove("hidden");
					}
				}
			};

			updateCountdown();
		}
	}
</script>
