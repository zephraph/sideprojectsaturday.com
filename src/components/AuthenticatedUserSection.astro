---
import { actions } from "astro:actions";
import type { Event } from "@generated/prisma/client";
import { getEventStartTime, isWithinEventHours } from "@/lib/date-utils";

interface Props {
	user: {
		name?: string;
		email: string;
		subscribed?: boolean;
		rsvped?: boolean;
	};
	hasEvent?: boolean;
	hasActiveEvent?: boolean;
	eventForToday?: Event | null;
}

const {
	user,
	hasEvent = true,
	hasActiveEvent = false,
	eventForToday,
} = Astro.props;

// Check if buzzer should be shown
const showBuzzer = hasActiveEvent && isWithinEventHours();

// Get buzzer action result
const buzzerResult = Astro.getActionResult(actions.openDoor);
---

<div>
	<h3 class="text-xl font-bold text-gray-800 mb-3 text-center">
		Welcome back, {user.name || user.email}!
	</h3>
	<div class="space-y-3">
		<div
			id="rsvp-section"
			class={hasEvent
				? "bg-green-50 border border-green-200 rounded-md p-3"
				: "bg-gray-50 border border-gray-200 rounded-md p-3"}
		>
			<div
				class={hasEvent
					? "text-sm font-medium text-green-800 mb-2"
					: "text-sm font-medium text-gray-800 mb-2"}
			>
				Next Event RSVP
			</div>
			{
				hasEvent ? (
					<>
						{(() => {
							if (eventForToday) {
								const now = new Date();
								const eventStart = getEventStartTime(eventForToday.eventDate);
								const timeDiff = eventStart.getTime() - now.getTime();

								if (eventForToday.status === "inprogress") {
									return (
										<div class="text-green-700 text-sm font-semibold mb-2">
											🚀 Event is happening now!
										</div>
									);
								} else if (timeDiff > 0) {
									const hours = Math.floor(timeDiff / (1000 * 60 * 60));
									const minutes = Math.floor(
										(timeDiff % (1000 * 60 * 60)) / (1000 * 60),
									);
									return (
										<div class="text-blue-700 text-sm font-semibold mb-2">
											⏰ Starting in{" "}
											{hours > 0
												? `${hours}h ${minutes}m`
												: `${minutes} minutes`}
										</div>
									);
								}
							}
							return null;
						})()}
						<div class="flex items-center justify-between">
							<span class="text-green-700 text-sm">
								{user.rsvped ? "✅ You're RSVP'd!" : "❌ Not RSVP'd"}
							</span>
							<form
								hx-post="/api/rsvp-toggle"
								hx-target="#rsvp-section"
								hx-swap="outerHTML"
							>
								<input
									type="hidden"
									name="rsvped"
									value={user.rsvped ? "false" : "true"}
								/>
								<button
									type="submit"
									class="text-xs text-green-600 hover:text-green-800 font-medium underline cursor-pointer"
								>
									{user.rsvped ? "Cancel RSVP" : "RSVP Now"}
								</button>
							</form>
						</div>
					</>
				) : (
					<div class="text-gray-600 text-sm">
						No event scheduled yet. Check back soon!
					</div>
				)
			}
		</div>

		<div class="bg-blue-50 border border-blue-200 rounded-md p-3">
			<div class="text-sm font-medium text-blue-800">Event Details</div>
			<div class="text-blue-700 text-sm mt-1">
				📍 Location: 325 Gold Street, Brooklyn, NY Studio 501<br />
				⏰ Time: 9:00 AM - 12:00 PM<br />
			</div>
		</div>

		<div class="bg-amber-50 border border-amber-200 rounded-md p-3">
			<div class="text-sm font-medium text-amber-800">What to Bring</div>
			<div class="text-amber-700 text-sm mt-1">
				💻 Your laptop<br />
				💡 A project idea<br />
				☕ Good vibes!
			</div>
		</div>

		<div
			id="subscription-section"
			class="bg-purple-50 border border-purple-200 rounded-md p-3"
		>
			<div class="text-sm font-medium text-purple-800 mb-2">
				Event Notifications
			</div>
			<div class="flex items-center justify-between">
				<span class="text-purple-700 text-sm">
					{
						user.subscribed !== false
							? "📧 Subscribed to future events"
							: "🔕 Unsubscribed from future events"
					}
				</span>
				<form
					hx-post="/api/subscription-toggle"
					hx-target="#subscription-section"
					hx-swap="outerHTML"
				>
					<input
						type="hidden"
						name="subscribed"
						value={user.subscribed === false ? "true" : "false"}
					/>
					<button
						type="submit"
						class="text-xs text-purple-600 hover:text-purple-800 font-medium underline cursor-pointer"
					>
						{user.subscribed !== false ? "Unsubscribe" : "Subscribe"}
					</button>
				</form>
			</div>
		</div>

		{
			showBuzzer && (
				<div class="bg-rose-50 border border-rose-200 rounded-md p-3">
					<div class="text-sm font-medium text-rose-800 mb-2">
						Building Access
					</div>
					{buzzerResult && !buzzerResult.error ? (
						<div class="text-green-700 text-sm mb-2">
							✅ {buzzerResult.data.message}
						</div>
					) : buzzerResult?.error ? (
						<div class="text-red-700 text-sm mb-2">
							❌ {buzzerResult.error.message}
						</div>
					) : null}
					<form method="POST" action={actions.openDoor}>
						<button
							type="submit"
							class="w-full bg-rose-600 text-white font-medium py-2 px-4 rounded-md hover:bg-rose-700 transition-all"
						>
							🚪 Open Building Door
						</button>
					</form>
					<div class="text-xs text-rose-600 mt-2">
						Press to unlock the building entrance
					</div>
				</div>
			)
		}

		<form method="POST" action={actions.signOut}>
			<button
				type="submit"
				class="w-full text-gray-600 font-medium py-2 px-4 rounded-md border border-gray-300 hover:bg-gray-50 transition-all"
			>
				Sign Out
			</button>
		</form>
	</div>
</div>
