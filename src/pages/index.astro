---
import { actions } from "astro:actions";
import {
	getCurrentWeekSaturdayDate,
	getDayRange,
	getNextSaturdayDate,
	getNextSaturdayFormatted,
	isWithinEventHours,
	canRsvpForCurrentEvent,
	getRsvpEventCutoff,
} from "@/lib/date-utils";
import AuthenticatedUserSection from "../components/AuthenticatedUserSection.astro";
import BackgroundDecorations from "../components/BackgroundDecorations.astro";
import MagicLinkSentSection from "../components/MagicLinkSentSection.astro";
import NextEventCard from "../components/NextEventCard.astro";
import RegistrationFormSection from "../components/RegistrationFormSection.astro";
import Layout from "../layouts/Layout.astro";
import { db } from "../lib/auth";

// Handle action results
const magicLinkResult = Astro.getActionResult(actions.sendMagicLink);
const signOutResult = Astro.getActionResult(actions.signOut);

// Get user session from middleware
const user = Astro.locals.user;
const session = Astro.locals.session;

// If user is authenticated, fetch their rsvped and subscribed status
let userWithPreferences = null;
if (user) {
	try {
		db(Astro.locals.runtime.env);
		const dbUser = await db.user.findUnique({
			where: { id: user.id },
			select: { rsvped: true, subscribed: true },
		});

		userWithPreferences = {
			...user,
			rsvped: dbUser?.rsvped ?? false,
			subscribed: dbUser?.subscribed ?? true,
		};
	} catch (error) {
		console.error("Error fetching user preferences:", error);
		userWithPreferences = {
			...user,
			rsvped: false,
			subscribed: true,
		};
	}
}

const nextEventDate = getNextSaturdayFormatted();
const currentWeekSaturday = getCurrentWeekSaturdayDate();
const { start, end } = getDayRange(currentWeekSaturday);

// Check for events (current and next)
let hasEvent = false;
let hasActiveEvent = false;
let eventForToday = null;
let nextEvent = null;
let rsvpEvent = null;

try {
	db(Astro.locals.runtime.env);
	
	// Check for any event today (scheduled or in progress)
	eventForToday = await db.event.findFirst({
		where: {
			eventDate: {
				gte: start,
				lt: end,
			},
			status: {
				in: ["scheduled", "inprogress"],
			},
		},
	});

	// Check if there's an active event in progress
	hasActiveEvent = eventForToday?.status === "inprogress";

	// Get the appropriate event for RSVP based on timing
	const eventCutoff = getRsvpEventCutoff();
	nextEvent = await db.event.findFirst({
		where: {
			eventDate: {
				gte: eventCutoff,
			},
			status: {
				in: ["scheduled", "inprogress"],
			},
		},
		orderBy: {
			eventDate: "asc",
		},
	});

	// Determine which event to show
	// Always show event info if there's an active or upcoming event
	if (eventForToday) {
		// Show current event info if it exists
		hasEvent = true;
		
		// For RSVP purposes, use current event if we can still RSVP, otherwise use next event
		if (canRsvpForCurrentEvent()) {
			rsvpEvent = eventForToday;
		} else if (nextEvent) {
			rsvpEvent = nextEvent;
		} else {
			rsvpEvent = eventForToday; // Still show current event even if no next event
		}
	} else if (nextEvent) {
		rsvpEvent = nextEvent;
		hasEvent = true;
	}

} catch (error) {
	console.error("Error checking for events:", error);
}

// Redirect after successful sign out
if (signOutResult && !signOutResult.error) {
	return Astro.redirect("/");
}
---

<Layout>
	<div
		class="min-h-screen flex flex-col items-center justify-center relative overflow-hidden -mt-16"
		style={{
			background:
				"linear-gradient(135deg, #fff8e7 0%, #ffeaa7 20%, #ffb347 35%, #87ceeb 60%, #4fc3f7 80%, #0288d1 100%)",
		}}
	>
		<BackgroundDecorations />

		<h1
			class="text-6xl md:text-7xl font-extrabold text-center relative z-10 mb-2 text-white font-sans tracking-tight"
			style={{
				textShadow: "2px 2px 4px rgba(0,0,0,0.8), 0px 0px 8px rgba(0,0,0,0.6)",
			}}
		>
			Side Project Saturday
		</h1>

		{
			!user && (
				<>
					<h2
						class="text-3xl md:text-4xl font-bold text-center relative z-10 mb-8 text-amber-400 font-sans"
						style={{
							textShadow:
								"0 0 15px rgba(251, 191, 36, 0.8), 0 0 30px rgba(251, 191, 36, 0.6), 2px 2px 6px rgba(0,0,0,0.7), 0px 0px 4px rgba(0,0,0,0.5)",
						}}
					>
						9am to noon
					</h2>

					<p
						class="text-xl md:text-2xl font-medium text-center relative z-10 mb-8 text-white font-sans"
						style={{
							textShadow:
								"2px 2px 4px rgba(0,0,0,0.8), 0px 0px 8px rgba(0,0,0,0.6)",
						}}
					>
						Brooklyn, NY
					</p>
				</>
			)
		}

		<div
			class={`backdrop-blur-sm rounded-lg p-6 shadow-xl relative z-10 w-md mx-4 border border-white/30 ${user ? "mt-6" : ""}`}
			style={{
				background: "rgba(255,255,255,0.85)",
			}}
		>
			<NextEventCard {nextEventDate} event={eventForToday || rsvpEvent} {hasEvent} />
			{
				userWithPreferences && session ? (
					<AuthenticatedUserSection
						user={userWithPreferences}
						hasEvent={hasEvent}
						hasActiveEvent={hasActiveEvent}
						eventForToday={eventForToday}
						rsvpEvent={rsvpEvent}
					/>
				) : magicLinkResult && !magicLinkResult.error ? (
					<MagicLinkSentSection message={magicLinkResult.data.message} />
				) : (
					<RegistrationFormSection error={magicLinkResult?.error} />
				)
			}
		</div>
	</div>
</Layout>
